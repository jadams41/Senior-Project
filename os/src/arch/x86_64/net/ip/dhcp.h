#ifndef _DHCP_H
#define _DHCP_H

#include <stdint-gcc.h>

/* DHCP overview
 * 1) DISCOVERY   (Client -> Server)
 * 2) OFFER       (Server -> Client)
 * 3) REQUEST     (Client -> Server)
 * 4) ACKNOWLEDGE (Server -> Client)
 */

typedef struct dhcp_packet_base dhcp_packet_base;

/* NOTE: structure and descriptions taken from: http://www.tcpipguide.com/free/t_DHCPMessageFormat.htm */
struct dhcp_packet_base {
	uint8_t  opcode;      /* Operation Code:
				 1 = request, 2 = reply  */
	uint8_t  h_type;      /* Hardware Type:
				 Specifies the type of hardware used for the
				 local network.
				 
				 **See below for values** */
	
	uint8_t  h_len;       /* Hardware Address Length:
				 Specifies how long hardware addresses are in
				 this message. For Ethernet (MAC addresses) this
				 value is 6. */
	
	uint8_t  hops;        /* Hops:
				 Set to 0 by a client before transmitting a
				 request. */
	
	uint32_t xid;         /* Transaction Identifier:
				 A 32-bit identification field generated by the
				 client, to allow it to match up the request 
				 with replies received from DHCP servers. */
	
	uint16_t secs;        /* Seconds:
				 Number of seconds elapsed since a client began
				 an attempt to acquire or renew a lease. */

	uint16_t flags;       /* Flags:
				 - Broadcast (1 bit):
				   A client that doesn't know its own IP address
				   at the time it sends its request sets this
				   flag to 1.
				 - Reserved (7 bits):
				   Set to zero and not used */
	
	uint32_t ci_addr;     /* Client IP Address:
				 The client puts its own current IP address in
				 this field if and only if it has a valid IP
				 address while in the BOUND, RENEWING, or
				 REBINDING states; otherwise, it sets this field
				 to 0. The client can only use this field when
				 its actually valid and usable, not during the
				 process of acquiring an address. */
	
	uint32_t yi_addr;     /* "Your" IP Address:
				 The IP address that the server is assigning to
				 the client. */
	
	uint32_t si_addr;     /* Server IP Address:
				 Address of the server that the client should
				 use for the next step in the bootstrap process,
				 which may or may not be the server sending this
				 reply. */
	
	uint32_t gi_addr;     /* Gateway IP Address:
				 This field is used just as it is in BOOTP, to 
				 route BOOTP messages when BOOTP relay agents 
				 are involved to facilitate the communication of
				 BOOTP requests and replies between a client and
				 a server on different subnets or networks. As
				 with BOOTP, this field is not used by clients
				 and does not represent the server giving the 
				 client the address of a default router 
				 (that's done using the Router DHCP option). */
	
	uint8_t  ch_addr[16]; /* Client Hardware Address:
				 The hardware (layer two) address of the client,
				 which is used for identification and
				 communication. */
	
	uint8_t  s_name[64];  /* Server Name:
				 Optionally server fills this with its name
				 during DHCPOFFER/DHCPACK. can be "nicknames"
				 or a full-qualified dns domain name. */
	uint8_t  file[128];   /* Optionally used to request a particular type
				 of boot file in a DHCPDISCOVER message.
				 Used by a server in a DHCPOFFER to fully 
				 specify a boot file directory path and
				 filename. */
}__attribute__((packed));

/* todo add more structs if I can find standardized packet formats ANYWHERE */



#endif
